// buildscript必须在顶部，注意位置
buildscript {
    repositories {
        // 优先使用国内源
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }
    dependencies {
        // 让spring-boot支持gradle
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.1.RELEASE")
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.1.RELEASE'
//    id 'war'   //默认是jar包，添加此插件之后支持打war包
}

// war 包名称自定义
//bootWar {
////    archiveBaseName = 'gradle'    //不需要带后缀（会自带版本号：gradle-0.0.1-SNAPSHOT.war）
//    archiveFileName ='gradle.war'    //需要加后缀
//}

// jar 包名称自定义
//bootJar {
////    archiveBaseName = 'gradle'    //不需要带后缀（默认形式，会自带版本号：gradle-0.0.1-SNAPSHOT.jar ）
//    archiveFileName ='gradle.jar'    //需要加后缀
//}

apply plugin: 'java'
apply plugin: 'idea'
// 使用spring boot
apply plugin: "org.springframework.boot"
// 使用spring boot的自动依赖管理
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.arenagod.gradle.MybatisGenerator"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

group 'org.example'
version '1.0-SNAPSHOT'

task copyJars(type: Copy){

    from configurations.runtime

    into "$buildDir/libs"

}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // 使用国内的源
    maven { url 'https://maven.aliyun.com/repository/public' }
    mavenCentral()
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.18'
    compile 'org.springframework.boot:spring-boot-starter-web'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.4.0'
    implementation group: 'org.springframework', name: 'spring-core', version: '5.3.0'
    implementation group: 'org.springframework', name: 'spring-aop', version: '5.3.0'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.4.4'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    implementation group: 'org.json', name: 'json', version: '20210307'
    implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.76'
    implementation group: 'com.networknt', name: 'exception', version: '2.0.25'
    implementation group: 'io.undertow', name: 'undertow-servlet', version: '2.2.7.Final'
    implementation group: 'com.alibaba', name: 'druid', version: '1.2.5'
    implementation group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '2.1.4'
    implementation group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.5'
    implementation group: 'tk.mybatis', name: 'mapper', version: '3.3.2'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.36'
    implementation group: 'com.oracle.database.jdbc', name: 'ojdbc6', version: '11.2.0.4'

    //数据库
    compile group: 'org.apache.tomcat', name: 'tomcat-jdbc', version: '8.5.23'
    //日志
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.196'


    //spark 包
//    implementation group: 'org.apache.spark', name: 'spark-core_2.11', version: '2.0.0'
//    implementation group: 'org.apache.spark', name: 'spark-sql_2.11', version: '2.0.0'
//    compileOnly group: 'org.apache.spark', name: 'spark-streaming_2.11', version: '2.0.0'
//    implementation group: 'io.netty', name: 'netty-all', version: '4.1.11.Final'
//    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.4.0'
}

test {
    useJUnitPlatform()
}

//tasks.withType(JavaCompile) {
//    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
//}

//configurations {
//    mybatisGenerator
//    getDbProperties
//}

//def getDbProperties = {
//    def properties = new Properties()
//    file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
//        properties.load(inputStream)
//    }
//    properties
//}

//mybatisGenerator {
//    verbose = true
//    configFile = 'src/main/resources/mybatis/generatorConfig.xml'
//}
